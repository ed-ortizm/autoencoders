[common]
bin = 05
model = doAnomaly
meta_data = 0_01_z_inf_2_0_snr_inf

[directories]
user = /home/edgar
work = ${user}/autoencoders-outlier-detection

spectra = ${user}/spectra
train = ${spectra}/process/${common:meta_data}/bin_${common:bin}
output = ${train}/bin_${common:bin}/${common:model}

[architecture]
encoder = 1024_512_128
latent_dimensions = 10
decoder = 128_512_1024
is_variational = True
model_name = anomalousVae
verbose = 0

[files]
train = bin_${common:bin}_fluxes_shuffle.npy

[hyperparameters]

validation_split = 0.2
learning_rate = 1e-3
batch_size = 64
epochs = 1000
output_activation = linear

# training parameters
early_stop_patience = 20
learning_rate_patience = 5
workers = 1
use_multiprocessing = False

[param-search]
# L = reconstruction_loss + (1-alpha)* KLD + (alpha + lambda -1) MDD

# weights
# reconstruction_weight = 3500_224000
reconstruction_weight = 100_1000
mmd_weight = 1
kld_weight = 1

# loss parameters
alpha = 0
lambda = random
number_lambdas = 200

[configuration]
# make sure the product is smaller or equals to the number of logical cores
# number of course in jupiter = 48
cores_per_worker = 1
number_processes = 48
